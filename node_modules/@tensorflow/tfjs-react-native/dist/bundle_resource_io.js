"use strict";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_1 = require("react-native");
const platform_react_native_1 = require("./platform_react_native");
class BundleResourceHandler {
    constructor(modelJson, modelWeightsId) {
        this.modelJson = modelJson;
        this.modelWeightsId = modelWeightsId;
        if (modelJson == null || modelWeightsId == null) {
            throw new Error('Must pass the model json object and the model weights path.');
        }
        if (Array.isArray(modelWeightsId)) {
            throw new Error('Bundle resource IO handler does not currently support loading ' +
                'sharded weights');
        }
    }
    /**
     * Save model artifacts. This IO handler cannot support writing to the
     * packaged bundle at runtime and is exclusively for loading a model
     * that is already packages with the app.
     */
    async save() {
        throw new Error('Bundle resource IO handler does not support saving. ' +
            'Consider using asyncStorageIO instead');
    }
    /**
     * Load a model from local storage.
     *
     * See the documentation to `browserLocalStorage` for details on the saved
     * artifacts.
     *
     * @returns The loaded model (if loading succeeds).
     */
    async load() {
        const modelJson = this.modelJson;
        // Load the weights
        const weightsAssetPath = react_native_1.Image.resolveAssetSource(this.modelWeightsId);
        const requestInit = undefined;
        const response = await platform_react_native_1.fetch(weightsAssetPath.uri, requestInit, { isBinary: true });
        const weightData = await response.arrayBuffer();
        if (modelJson.weightsManifest.length > 1) {
            throw new Error('Bundle resource IO handler does not currently support loading ' +
                'sharded weights and the modelJson indicates that this model has ' +
                'sharded weights (more than one weights file).');
        }
        const modelArtifacts = Object.assign({}, modelJson);
        modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;
        //@ts-ignore
        delete modelArtifacts.weightManifest;
        modelArtifacts.weightData = weightData;
        return modelArtifacts;
    }
}
/**
 * Factory function for BundleResource IOHandler.
 *
 * This `IOHandler` only supports `load`. It is designed to support
 * loading models that have been statically bundled (at compile time)
 * with an app.
 *
 * @param modelJson The JSON object for the serialized model.
 * @param modelWeightsId An identifier for the model weights file. This is
 * generally a resourceId or a path to the resource in the app package.
 * This is typically obtained with a `require` statement.
 *
 * See
 * facebook.github.io/react-native/docs/images#static-non-image-resources
 * for more details on how to include static resources into your react-native
 * app including how to configure `metro` to bundle `.bin` files.
 *
 * @returns An instance of `IOHandler`
 */
function bundleResourceIO(modelJson, modelWeightsId) {
    if (typeof modelJson !== 'object') {
        throw new Error('modelJson must be a JavaScript object (and not a string).\n' +
            'Have you wrapped yor asset path in a require() statment?');
    }
    if (typeof modelWeightsId !== 'number') {
        throw new Error('modelWeightsID must be a number.\n' +
            'Have you wrapped yor asset path in a require() statment?');
    }
    return new BundleResourceHandler(modelJson, modelWeightsId);
}
exports.bundleResourceIO = bundleResourceIO;
//# sourceMappingURL=bundle_resource_io.js.map